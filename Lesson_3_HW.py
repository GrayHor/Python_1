# EASY

# Задание-1:
# Напишите функцию, округляющую полученное произвольное десятичное число
# до кол-ва знаков (кол-во знаков передается вторым аргументом).
# Округление должно происходить по математическим правилам (0.6 --> 1, 0.4 --> 0).
# Для решения задачи не используйте встроенные функции и функции из модуля math.

def roundit(n, d):
    ost = (n * (10 ** d)) - int(n * (10 ** d))
    if ost >= 0.5:
        rez = ((int(n * (10 ** d))) + 1) / (10 ** d)
    else:
        rez = ((int(n * (10 ** d)))) / (10 ** d)
    return rez

print(roundit(float(input()), int(input())))



# Задание-2:
# Дан шестизначный номер билета. Определить, является ли билет счастливым.
# Решение реализовать в виде функции.
# Билет считается счастливым, если сумма его первых и последних цифр равны.
# !!!P.S.: функция не должна НИЧЕГО print'ить

def ifhappy(n):
        if sum(n[:3]) == sum(n[3:]):
            return True
ifhappy(list(map(int, (input()))))


#NORMAL

# Задание-1:
# Напишите функцию, возвращающую ряд Фибоначчи с n-элемента до m-элемента.
# Первыми элементами ряда считать цифры 1 1

f = [1, 1]

def fib(n, m):
    i = 2
    while i <= m:
        f.append(f[i - 1] + f[i - 2])
        i += 1
    return f[n-1:m]

print(*fib(int(input()), int(input())))

# Задача-2:
# Напишите функцию, сортирующую принимаемый список по возрастанию.
# Для сортировки используйте любой алгоритм (например пузырьковый).
# Для решения данной задачи нельзя использовать встроенную функцию и метод sort()



def sortit(sp):
    for j in range(len(sp)-1):
        i = j
        for i in range(len(sp)-1):
            if sp[i] > sp[i + 1]:
                sp[i], sp[i + 1] = sp[i + 1], sp[i]
    return sp


sp = [9, 1, 7, 5, 8, 4, 9]
print(sortit(sp))

#HARD

# Задание-1

# Написать консольное меню вида:

# 1. Добавить
# 2. Удалить
# 3. Распечатать
# 4. Посчитать
# 5. Выйти

# Надо чтобы
# а) Можно было удобно менять порядок меню и\или добавлять\удалять пункты меню
# б) Каждое действие (добавить, удалить и тд) должно быть функцией
# в) У пользователя надо спросить номер команды
# г) Программа не должна завершаться пока не введется команда Выйти
# д) Проверять на ввод ошибочных данных, там где они могут появиться